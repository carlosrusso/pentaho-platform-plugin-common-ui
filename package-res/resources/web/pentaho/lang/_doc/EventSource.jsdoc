/*!
 * Copyright 2010 - 2016 Pentaho Corporation.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @classDesc The `EventSource` class is a mixin to be
 * used by classes that are the source of events - that emit events.
 *
 * The exposed interface is compatible with the
 * [dojo/on]{@link https://dojotoolkit.org/reference-guide/dojo/on.html} API.
 *
 * @name EventSource
 * @memberOf pentaho.lang
 * @class
 */
var instanceMethods = /** @lends pentaho.lang.EventSource# */{
  /**
   * Registers a listener of events of a given type emitted by this object.
   *
   * Optionally, a _listening priority_ may be specified to adjust the order
   * by which listeners are notified of an emitted event.
   *
   * If a listener is registered more than once to the same event,
   * it is only actually registered once.
   * However, it is the last specified priority that determines its listening priority.
   *
   * It is safe to add listeners during an event emission.
   * However, new listeners are only notified in subsequent emissions.
   *
   * @see pentaho.lang.EventSource#off
   * @see pentaho.lang.Event
   *
   * @param {string} type The type of the event.
   * @param {!pentaho.lang.EventListener} listener The listener function.
   * @param {?object} [keyArgs] Keyword arguments.
   * @param {?number} [keyArgs.priority=0] The listening priority.
   * Higher priority event listeners listen to an event before any lower priority event listeners.
   * The priority can be set to `-Infinity` or `Infinity`.
   * In case two listeners are assigned the same priority,
   * the insertion order determines which runs first.
   *
   * @return {!pentaho.lang.IEventHandle} An event handle that can be used to
   *   efficiently remove the event listener.
   */
  on: function(type, listener, keyArgs) {
  },

  /**
   * Unregisters a listener from an event.
   *
   * The recommended way to unregister from an event is by
   * calling the [dispose]{@link pentaho.lang.IEventHandle#dispose} method
   * of the event handle returned, upon registration, by [on]{@link pentaho.lang.EventSource#on}.
   * This usage pattern, however, requires storing the event handle,
   * something which is sometimes undesirable.
   *
   * This method allows unregistering from an event
   * when given the same main arguments used when registering to it.
   *
   * This method can also be called with a single argument, an event handle,
   * in which case it is disposed of.
   *
   * It is safe to remove listeners during an event emission.
   * However, removed listeners are still notified in the current emission.
   *
   * @param {string|!pentaho.lang.IEventHandle} typeOrHandle The type of the event,
   *  or an event handle to dispose of.
   * @param {!pentaho.lang.EventListener} [listener] The listener function.
   */
  off: function(typeOrHandle, listener) {
  },

  /**
   * Determines if there are any listeners registered to an event.
   *
   * This method can be used to avoid creating expensive event objects
   * for events that currently have no registered listeners.
   *
   * @example
   *
   * if(this._hasListeners("selecting")) {
   *   var event = new Event("selecting");
   *   if(this._emit(event)) {
   *     // Select
   *   }
   * }
   *
   * @param {string} type The type of the event.
   * @return {boolean} `true` if the event has any listeners, `false` if not.
   *
   * @protected
   */
  _hasListeners: function(type) {
    return true;
  },

  /**
   * Emits an event and returns it, unless it was canceled.
   *
   * Event listeners registered by the time the method is called are notified,
   * synchronously, by priority order and then insertion order,
   * until either the event is canceled or all of the listeners have been notified.
   *
   * It is safe to add and/or remove listeners during an event emission.
   * However, any changes only impact following event emissions.
   *
   * If an event listener throws an error, the event processing is interrupted.
   * No more listeners are notified and the error is passed to the caller.
   *
   * @param {!pentaho.lang.Event} event The event object emit.
   * @return {?pentaho.lang.Event} The emitted event object or `null`, when canceled.
   *
   * @protected
   * @sealed
   */
  _emit: function(event) {
    return event;
  }
};